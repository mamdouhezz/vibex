{
    "schemaVersion": "1.0.0",
    "ruleSetName": "VibeX Circular Dependency Audit Rules",
    "version": "1.0.0",
    "description": "Rules and audit protocol for detecting, analyzing, and eliminating circular dependencies across the VibeX codebase.",
    "enforcedBy": "VibeX AI Software Architect",
    "philosophy": "Circular dependencies are toxic to stability. They must be detected early and refactored at the root cause, never patched over.",
  
    "rules": [
      {
        "ruleId": "CDEP-01",
        "name": "Audit on Error Trigger",
        "description": "Any runtime error like 'Uncaught SyntaxError: Missing initializer in const declaration' must trigger a circular dependency audit immediately."
      },
      {
        "ruleId": "CDEP-02",
        "name": "Mandatory Import Graph Analysis",
        "description": "When debugging, developers must map imports recursively until confirming no cycles exist.",
        "guidelines": [
          "List all imports in the suspect file.",
          "Check each imported file for further imports.",
          "Continue until a cycle is confirmed or eliminated."
        ]
      },
      {
        "ruleId": "CDEP-03",
        "name": "Refactor via Unidirectional Dependency Rule",
        "description": "All fixes must comply with dependency hierarchy (pages > components > engine/hooks/utils > types/constants).",
        "approved_solutions": [
          "Move shared logic down (to utils/types/constants).",
          "Lift state up (pass via props instead of cross-import).",
          "Create a new foundational file (e.g., src/types/index.ts)."
        ]
      }
    ],
  
    "implementationProtocol": {
      "title": "Circular Dependency Audit Protocol",
      "steps": [
        {
          "step": 1,
          "name": "Identify Suspects",
          "action": "Start with files mentioned in error logs (e.g., Engine.ts, PlaygroundPage.tsx)."
        },
        {
          "step": 2,
          "name": "Map Import Graph",
          "action": "Trace imports recursively until a cycle is found."
        },
        {
          "step": 3,
          "name": "Propose Refactor",
          "action": "Choose an approved solution to break the cycle (move down, lift up, or new foundational file)."
        },
        {
          "step": 4,
          "name": "Execute & Verify",
          "action": "Apply the fix, then re-run tsc --noEmit and npm run dev. Both must pass cleanly."
        }
      ]
    },
  
    "verification": {
      "tsc_check": "Run tsc --noEmit. Must complete without errors.",
      "runtime_check": "Run npm run dev. App must boot without 'Missing initializer' or circular dependency crashes.",
      "graph_check": "Import graph must be acyclic after refactor."
    }
  }