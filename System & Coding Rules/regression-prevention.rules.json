{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "ruleSetName": "VibeX Zero-Regression & Feature Preservation Mandate",
    "version": "1.0.0",
    "description": "Strict, non-negotiable rules to prevent regressions or breaking tested features when introducing new code. This is the highest-priority safeguard in the project.",
    "enforcedBy": "VibeX AI Staff Engineer",
    "philosophy": "Do No Harm. New code must integrate seamlessly without removing or weakening existing features. Complexity should be abstracted, not deleted.",
  
    "rules": [
      {
        "ruleId": "REG-01",
        "name": "Preservation of Existing Functionality",
        "description": "No deleting, disabling, or rewriting existing, tested features. New implementations must adapt to existing architecture.",
        "violations": {
          "action": "Immediate code revert and rejection until fixed.",
          "examples": [
            "Deleting a working panel to fix state issues.",
            "Commenting out real-time tips because they conflict with a new feature.",
            "Replacing a multi-state component with a simpler one that loses behavior."
          ]
        }
      },
      {
        "ruleId": "REG-02",
        "name": "Test-Driven Refactoring Principle",
        "description": "Refactors to existing features must be protected by tests proving no behavior change.",
        "enforcement": "No merge allowed without passing test coverage on critical functionality.",
        "procedure": [
          "Write a test verifying current behavior.",
          "Refactor the component/logic.",
          "Run test suite to confirm no breakage."
        ]
      },
      {
        "ruleId": "REG-03",
        "name": "Isolation & Abstraction Principle",
        "description": "New features must be implemented in isolation first and integrated through stable, defined interfaces (e.g., hooks, services).",
        "guidelines": [
          "Never directly modify internals of existing components.",
          "Abstract shared state into hooks before adding new logic.",
          "Develop in feature branches (`feature/...`) with full regression testing before merge."
        ]
      }
    ],
  
    "implementationProtocol": {
      "title": "Mandatory 4-Step Zero-Regression Protocol",
      "steps": [
        {
          "step": 1,
          "name": "Acknowledge Existing Features",
          "action": "List all current states and features before making changes.",
          "example": "Acknowledged: `PlaygroundPage` contains formData, currentStep, realtimeTips, dynamicQuestions."
        },
        {
          "step": 2,
          "name": "Formulate Non-Destructive Plan",
          "action": "Propose how new code integrates without breaking old logic.",
          "example": "Plan: Add `isPremiumUser` state without altering realtimeTips logic."
        },
        {
          "step": 3,
          "name": "Implement with Surgical Precision",
          "action": "Add small, targeted changes instead of sweeping rewrites."
        },
        {
          "step": 4,
          "name": "Perform Self-Correction & Regression Check",
          "action": "Review your code against acknowledged features. State explicitly that regression was checked.",
          "verification": "Self-Correction Complete: realtimeTips and dynamicQuestions remain intact."
        }
      ]
    }
  }